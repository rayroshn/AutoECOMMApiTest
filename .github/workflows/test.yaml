name: Run Maven Tests

on:
  push:
    branches:
      - master  # Change this to your default branch if necessary
  pull_request:
    branches:
      - master  # Run on pull requests to the main branch

jobs:
  build:
    runs-on: windows-latest  # Use a Windows environment

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          path: AutoECOMMApiTest # Specify a custom path to avoid duplication

      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          java-version: '11'  # Specify the JDK version your project uses
          distribution: 'temurin'  # Use 'temurin', 'adopt', or 'zulu'

      - name: Create Log directory (Windows)
        run: |
          if (-Not (Test-Path -Path "src/test/resources/Log")) { New-Item -Path "src/test/resources/Log" -ItemType Directory }
        shell: pwsh  # Use PowerShell as the shell on Windows

      - name: Build with Maven
        run: mvn clean -f AutoECOMMApiTest/pom.xml  # Clean the project

      - name: Run API tests
        run: mvn test -f AutoECOMMApiTest/pom.xml   # Continue even if tests fail
      # Run the tests

      - name: Upload Log Files
        uses: actions/upload-artifact@v3  # Ensure you're using the latest version
        with:
          name: test-logs
          path: src/test/resources/Log/*.log  # Adjust the path if needed

      - name: Ensure Allure Results Directory Exists
        run: mkdir -p target/allure-results

      - name: Generate Allure Report
        run: mvn allure:report -DoutputDirectory=AutoECOMMApiTest/target/allure-results  # Generate the Allure report

      - name: Upload Allure Results
        uses: actions/upload-artifact@v3
        with:
          name: Allure-Results
          path: AutoECOMMApiTest/target/allure-results  # Path where Allure results are stored

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '14'  # Specify the Node.js version

      - name: Install Allure Commandline
        run: npm install -g allure-commandline

      - name: Generate Allure HTML report
        run: allure generate target/allure-results --clean -o target/allure-report  # Specify the output directory

      - name: Deploy Allure Report to GitHub Pages
        if: success() || failure()  # Deploy regardless of test success/failure
        uses: peaceiris/actions-gh-pages@v3.8.0
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: target/allure-report  # Path to the generated Allure HTML report
          publish_branch: gh-pages
